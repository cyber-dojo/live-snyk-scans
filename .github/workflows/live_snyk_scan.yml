name: Live Snyk scans

on:
  workflow_call:
    inputs:
      KOSLI_ENV:
        required: true
        type: string
    secrets:
      SNYK_TOKEN:
        required: true
      KOSLI_API_TOKEN:
        required: true

env:
  KOSLI_API_TOKEN: ${{ secrets.KOSLI_API_TOKEN }}
  KOSLI_DEBUG:     ${{ vars.KOSLI_DEBUG }}          # true/false
  KOSLI_DRY_RUN:   true # ${{ vars.KOSLI_DRY_RUN }} # true/false
  KOSLI_HOST:      ${{ vars.KOSLI_HOST }}           # https://app.kosli.com
  KOSLI_ORG:       ${{ vars.KOSLI_ORG }}            # cyber-dojo
  KOSLI_FLOW:      ${{ vars.KOSLI_FLOW }}           # aws-snyk-scan
  KOSLI_ENV:       ${{ inputs.KOSLI_ENV }}          # aws-beta | aws-prod

  AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}
  AWS_REGION:     ${{ vars.AWS_REGION }}

jobs:

  find-artifacts:
    needs: []
    runs-on: ubuntu-latest
    outputs:
      artifacts: "${{ steps.vars.outputs.artifacts }}"
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Kosli CLI
        uses: kosli-dev/setup-cli-action@v2
        with:
          version: ${{ vars.KOSLI_CLI_VERSION }}

      - name: Generate JSON for each Artifact in KOSLI_ENV for following job's strategy:matrix:include
        id: vars
        run:
          echo "artifacts=$(make artifacts | jq --raw-output --compact-output .)" >> ${GITHUB_OUTPUT}


  live-snyk-scan:
    if: ${{ needs.find-artifacts.outputs.artifacts != '[]' }}
    needs: [find-artifacts]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
    strategy:
      matrix:
        include: ${{ fromJSON(needs.find-artifacts.outputs.artifacts) }}
    env:
      SNYK_POLICY_FILENAME: .snyk
      SNYK_SARIF_FILENAME: snyk.container.scan.json
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/gh_actions_live_snyk_scans
          aws-region: ${{ env.AWS_REGION }}
          role-duration-seconds: 2400
          role-session-name: ${{ github.event.repository.name }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Setup Snyk
        uses: snyk/actions/setup@master

      - name: Get the .snyk file
        run:
          curl "${{ matrix.raw_snyk_file_url }}" > ${SNYK_POLICY_FILENAME}

      - name: Run Snyk container scan
        if: ${{ matrix.flow_name == 'runner' }}
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run:
          snyk container test "${{ matrix.artifact_name }}"
            --debug
            --policy-path=${SNYK_POLICY_FILENAME}
            --sarif
            --sarif-file-output="${SNYK_SARIF_FILENAME}"

      - name: Setup Kosli CLI
        if: ${{ success() || failure() }}
        uses: kosli-dev/setup-cli-action@v2
        with:
          version: ${{ vars.KOSLI_CLI_VERSION }}

      - uses: actions/checkout@v4
        if: ${{ success() || failure() }}
        with:
          fetch-depth: 1

      # [kosli attest artifact] should not be necessary here, but currently it is.
      - name: Attest artifact to Kosli
        if: ${{ matrix.flow_name == 'runner' && (success() || failure()) }}
        # if: ${{ success() || failure() }}
        env:
          KOSLI_TRAIL: ${{ matrix.repo_name }}-${{ matrix.artifact_fingerprint }}
        run:
          kosli attest artifact
            --fingerprint="${{ matrix.artifact_fingerprint }}"
            --name="${{ matrix.repo_name }}"

      - name: Attest snyk scan to Kosli
        if: ${{ matrix.flow_name == 'runner' && (success() || failure()) }}
        # if: ${{ success() || failure() }}
        env:
          KOSLI_TRAIL: ${{ matrix.repo_name }}-${{ matrix.artifact_fingerprint }}
        run:
          kosli attest snyk
            --annotate=snapshot_url="${{ matrix.snapshot_artifact_url }}"
            --attachments="${SNYK_POLICY_FILENAME}"
            --fingerprint="${{ matrix.artifact_fingerprint }}"
            --name="${{ matrix.repo_name }}.snyk-container-scan"
            --scan-results="${SNYK_SARIF_FILENAME}"

